www.git-scm.com

click file/ git bash

git init
	*creates git repository
git status
	*check location and what is in repository
git add *filename.*
	*add file to repository
git status
	*check the status of file location
git commit

	i	*input text*
		write message
	esc	*end input*
		:wq
		*ends commit*

(change file)
git commit -m 'change 3'
*commits script

touch .gitignore
*creates .gitignore file
	within file type
	*.docx
	*.m
	*.c
		etc. // to ignore all files of ending
 git status
	*file will be ignored
	* git add .
		adds all
	*git commit -m 'adding ignore file'
<<<<<<< HEAD
=======

STOP(DAY 2) 

>>>>>>> CHE
git branch MyBranch //creates new branch **name**

git chechout MyBranch //switches to branch

touch index.css //creates new file

git add.

git commit -m 'new updates' // commit to branch

git checkout master // switches to master branch

git status //to ensure on master branch

make changes to readme.txt file

git merge MyBranch

git commit -a -m 'change 7'

git checkout MyBranch //back to branch

**in readme.txt type change 8
git commit -a -m 'change 8'
//commits change 8 to MyBranch

git merge master
**CONFLICT**

/* git should write 
<<<<<<HEAD 
(Whatever has not been
 committed that is creating 
a conflict)
>>>>>>>master 
WITHIN your readme.txt file*/

if git does not
	type:

git diff

(ex.)

Christopher@CommandCenter MINGW64 ~/Desktop/Avionics/Day2 (MyBranch|MERGING)
$ git diff
diff --cc readme.txt
index 920e899,1704377..0000000
--- a/readme.txt
+++ b/readme.txt
@@@ -8,3 -8,4 +8,6 @@@ change
  change 6
  change 7
  change 8
+ change 9
++
++I have a bunny named Pablo

under all the @@@@ is the prevoius unmerged version
to the master. when the ++ start is the conflict 
lines that need to be committed to MyBranch using

git add .

git commit

 -i // intializes input
  -then name your commit
  -press esc
  - :wq // to exit commit

git will complete the merge. check with

git checkout master

git status

git checkout MyBranch

git status 

:)


git mergetool

tortisemerge
winmerge
configure git 

touch newfile.txt

<<<<<<< HEAD
git stash 

git stash apply
14:29

git clone  ufl

git remote
 git fluentguard

git remote

git remote -v //shows origin urls

git fetch origin 

git pull origin

git push origin master
=======
git add .

git status
	//newfile.txt will be staged

git stash 
// to save "stash" changes made to a 
//branch that are not ready to by commited
// saves stage of newfile.txt

git status
//check 

git stash apply
//reapply stashed changes to branch
14:29

git clone  url from github.com

git clone https://github.com/UFAvionics/Pilot.git

git remote
//nothing happens

cd Pilot (name of repository from github)

//type ( git remote)
// you will see:
git remote
origin

git remote -v 
//shows origin urls
** IMPORTANT**
//To keep up to date use 'fetch' and 'pull'
//git fetch origin will go out to the server
//and get any changes made since you last cloned or fetched
//fetching will pull the data into your local repository
// but will not merge it into your work
//will need to merge manually

// Using 'git pull origin' 
// will automatically fetch and merge the changes from the 
//remote branch into your current branch


git push origin master
//adds repository to master
//asks for credentials which would be the administrator of
//the github repository

// to add repositories
git remote add <name of repository> <give url>
git remote add MyRepo http://github.com/somerepot.git

//use git remote and you'll see:
git remote
MyRepo
origin

git remote -v

git fetch MyRepo

[EL FIN]


>>>>>>> CHE
	